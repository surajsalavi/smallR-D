{"version":3,"file":"vara.umd.development.js","sources":["../src/utils/char.ts","../src/types.ts","../src/utils/renderbase.ts","../src/utils/letterpart.ts","../src/utils/letter.ts","../src/utils/line.ts","../src/utils/block.ts","../src/index.ts"],"sourcesContent":["import { VaraFontItem } from '../types';\r\n\r\ninterface VaraCharProps {\r\n    char: string;\r\n    fontItem: VaraFontItem;\r\n    isSpace?: boolean;\r\n}\r\n\r\nlet varaCharId = 0;\r\n\r\nexport default class VaraChar {\r\n    char: string;\r\n    id: number;\r\n    fontItem: VaraFontItem;\r\n    isSpace: boolean;\r\n\r\n    constructor(props: VaraCharProps) {\r\n        this.char = props.char;\r\n        this.fontItem = props.fontItem;\r\n        this.isSpace = props.isSpace ?? false;\r\n\r\n        this.id = varaCharId;\r\n        varaCharId++;\r\n    }\r\n\r\n    getFontItem() {\r\n        return this.fontItem;\r\n    }\r\n\r\n    getId() {\r\n        return this.id;\r\n    }\r\n}\r\n","import Block from \"./utils/block\";\r\nimport Letter from \"./utils/letter\";\r\nimport LetterPart from \"./utils/letterpart\";\r\nimport Line from \"./utils/line\";\r\n\r\nexport type VaraGeneralOptions = {\r\n    fontSize?: number;\r\n    strokeWidth?: number;\r\n    color?: string;\r\n    duration?: number;\r\n    textAlign?: 'left' | 'center' | 'right';\r\n    autoAnimation?: boolean;\r\n    queued?: boolean;\r\n    delay?: number;\r\n    letterSpacing?:\r\n        | {\r\n              [x: string]: number;\r\n          }\r\n        | number;\r\n    breakWord?: boolean;\r\n    width?: number;\r\n    lineHeight?: number;\r\n};\r\n\r\nexport type VaraTextOptions = VaraGeneralOptions & {\r\n    id?: string | number | false;\r\n    x?: number;\r\n    y?: number;\r\n    absolutePosition?: boolean;\r\n};\r\n\r\nexport type VaraText = VaraTextOptions & {\r\n    text: string | string[];\r\n};\r\n\r\nexport type VaraFontItem = {\r\n    paths: Array<{\r\n        w: number;\r\n        h: number;\r\n        my: number;\r\n        mx: number;\r\n        dx: number;\r\n        d: string;\r\n        pl: number;\r\n    }>;\r\n    w: number;\r\n};\r\n\r\nexport type ObjectKeys<T> = T extends object\r\n    ? (keyof T)[]\r\n    : T extends number\r\n    ? []\r\n    : T extends Array<any> | string\r\n    ? string[]\r\n    : never;\r\n\r\nexport const BLOCK_COMPOSITION = [\"block\",\"line\",\"letter\",\"letterPart\"] as const;\r\n\r\nexport type BlockComposition = typeof BLOCK_COMPOSITION;\r\n\r\nexport type BlockName = BlockComposition[number];\r\n\r\nexport type Blocks = Block | Line | Letter | LetterPart;\r\n\r\nexport type BlockMapped = {\r\n    \"block\" : Block,\r\n    \"line\": Line,\r\n    \"letter\": Letter,\r\n    \"letterPart\": LetterPart\r\n}","import { BlockMapped, BlockName, Blocks, BLOCK_COMPOSITION } from '../types';\r\n\r\ninterface RenderItemProps {\r\n    ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks;\r\n}\r\n\r\nexport default class RenderBase {\r\n    protected ctx: CanvasRenderingContext2D;\r\n    parent?: Blocks | null;\r\n    name: BlockName;\r\n\r\n    constructor(props: RenderItemProps) {\r\n        this.ctx = props.ctx;\r\n        this.parent = props.parent ?? null;\r\n        this.name = 'block';\r\n    }\r\n\r\n    getParent<T extends BlockName>(\r\n        parentName: T,\r\n        current: Blocks\r\n    ): BlockMapped[T] | false {\r\n        const parentIndex = BLOCK_COMPOSITION.indexOf(parentName);\r\n        const currentItemIndex = BLOCK_COMPOSITION.indexOf(this.name);\r\n        if (parentIndex < currentItemIndex) {\r\n            if (current.name === parentName) {\r\n                return current as BlockMapped[T];\r\n            } else {\r\n                if (current.parent)\r\n                    return this.getParent(parentName, current?.parent);\r\n                else return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { BlockName } from '../types';\r\nimport Block from './block';\r\nimport Letter from './letter';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LetterPartProps {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Letter;\r\n}\r\n\r\nexport default class LetterPart extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    path: string;\r\n    pathLength: number;\r\n    dashOffset: number;\r\n    width: number;\r\n    name: BlockName;\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterPartProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.path = props.path;\r\n        this.pathLength = props.pathLength;\r\n        this.dashOffset = props.dashOffset;\r\n        this.width = props.width;\r\n\r\n        this.name = 'letterPart';\r\n\r\n        this.rootBlock = this.getParent('block', this) as Block;\r\n    }\r\n\r\n    /**\r\n     * Paints the path\r\n     */\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.stroke(\r\n            new Path2D(this.processPath(this.path, this.x, this.y))\r\n        );\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Increments the dashOffset and then paints the path.\r\n     */\r\n    draw(delta: number) {\r\n        const pathDuration =\r\n            ((this.pathLength / this.rootBlock.totalPathLength) *\r\n                this.rootBlock.options.duration) /\r\n            1000;\r\n\r\n        const speed = this.pathLength / pathDuration;\r\n\r\n        this.ctx.save();\r\n        this.ctx.lineDashOffset = 1;\r\n        this.ctx.setLineDash([this.dashOffset, this.pathLength + 1]);\r\n        this.dashOffset += speed * delta;\r\n        this.paint();\r\n        this.ctx.restore();\r\n    }\r\n\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n}\r\n","import { BlockName } from '../types';\r\nimport Block from './block';\r\nimport VaraChar from './char';\r\nimport LetterPart, { LetterPartProps } from './letterpart';\r\nimport Line from './line';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LetterProps {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Line;\r\n    character: VaraChar;\r\n}\r\n\r\nlet letterId = 0;\r\n\r\nexport default class Letter extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    character: VaraChar;\r\n    id: number;\r\n\r\n    parts: LetterPart[];\r\n\r\n    drawnParts: LetterPart[];\r\n    name: BlockName;\r\n\r\n    rootBlock: Block;\r\n\r\n    constructor(props: LetterProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.width = props.width;\r\n        this.parts = [];\r\n        this.drawnParts = [];\r\n        this.name = 'letter';\r\n\r\n        this.character = props.character;\r\n\r\n        this.id = letterId;\r\n        letterId++;\r\n\r\n        this.rootBlock = this.getParent('block', this) as Block;\r\n    }\r\n\r\n    setPosition(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Add a new part to the queue\r\n     * @param part The part to be added\r\n     */\r\n    addPart(part: Omit<LetterPartProps, 'ctx' | 'parent'>) {\r\n        this.parts.push(\r\n            new LetterPart({\r\n                ...part,\r\n                ctx: this.ctx,\r\n                parent: this,\r\n            })\r\n        );\r\n\r\n        // Update the total path length stored in the main block.\r\n        if (this.rootBlock) {\r\n            this.rootBlock.modifyPathLength(part.pathLength, 'increment');\r\n        }\r\n    }\r\n\r\n    setParent(parent: Line) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    isDone() {\r\n        return this.parts.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Remove the first item from the queue. Used when a part has been drawn completely.\r\n     *\r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.parts.shift();\r\n        if (removedItem) this.drawnParts.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current letter\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, previousRAFTime: number) {\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale, this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        const delta = (rafTime - previousRAFTime) / 1000;\r\n\r\n        if (this.parts.length > 0) {\r\n            const part = this.parts[0];\r\n            if (part.dashOffset > part.pathLength) {\r\n                this.dequeue();\r\n            } else {\r\n                part.draw(delta);\r\n            }\r\n        }\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        });\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Paints the paths whose animations are complete\r\n     */\r\n    paint() {\r\n        this.ctx.save();\r\n        this.ctx.scale(this.rootBlock.scale, this.rootBlock.scale);\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        this.drawnParts.forEach(drawnPart => {\r\n            drawnPart.paint();\r\n        });\r\n\r\n        this.ctx.restore();\r\n    }\r\n}\r\n","import Block from './block';\r\nimport Letter, { LetterProps } from './letter';\r\nimport RenderBase from './renderbase';\r\n\r\nexport interface LineProps {\r\n    x: number;\r\n    y: number;\r\n    ctx: CanvasRenderingContext2D;\r\n    parent: Block;\r\n}\r\n\r\nlet lineId = 0;\r\n\r\n/**\r\n * Used to represent a line of text drawn in the canvas.\r\n *\r\n */\r\n\r\nexport default class Line extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    letters: Letter[];\r\n    drawnLetters: Letter[];\r\n    id: number;\r\n\r\n    constructor(props: LineProps) {\r\n        super(props);\r\n\r\n        this.x = props.x;\r\n        this.y = props.y;\r\n        this.ctx = props.ctx;\r\n\r\n        // This will act as queue of letters\r\n        // Each item is animated one after the other\r\n        this.letters = [];\r\n\r\n        // This will contain all the letters that have already been drawn (animated).\r\n        this.drawnLetters = [];\r\n\r\n        // The name of this class.\r\n        // Name is used for finding a specific parent using the getParent method\r\n        this.name = 'line';\r\n\r\n        this.width = 0;\r\n\r\n        this.id = lineId;\r\n        lineId++;\r\n    }\r\n\r\n    /**\r\n     * Add a new letter to this line\r\n     * @param letter - The letter to be added\r\n     */\r\n    addLetter(letter: Omit<LetterProps, 'ctx' | 'parent'> & { parent?: Line }) {\r\n        // Create the letter\r\n\r\n        const newLetter = new Letter({\r\n            ...letter,\r\n            parent: letter.parent ?? this,\r\n            ctx: this.ctx,\r\n        });\r\n\r\n        // Create all the parts of the letter\r\n        // A letter can have multiple parts.\r\n        // The letter i has two parts, the tittle (dot) and the line part?\r\n\r\n        letter.character.getFontItem().paths.forEach(path => {\r\n            newLetter.addPart({\r\n                path: path.d,\r\n                x: path.mx - path.dx,\r\n                y: -path.my,\r\n                pathLength: path.pl,\r\n                dashOffset: 0,\r\n                width: path.w,\r\n            });\r\n        });\r\n\r\n        this.width += letter.width;\r\n        this.letters.push(newLetter);\r\n\r\n        // Return the newly created letter\r\n        return newLetter;\r\n    }\r\n\r\n    removeLetter(letterId: number) {\r\n        this.letters = this.letters.filter(letter => letter.id !== letterId);\r\n        this.drawnLetters = this.drawnLetters.filter(\r\n            letter => letter.id !== letterId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Override the letters of this line.\r\n     *\r\n     * Letter states are preserved.\r\n     *\r\n     * @param letters The new letters of the line\r\n     */\r\n    setLetters(letters: Letter[]) {\r\n        this.letters = letters.filter(letter => !letter.isDone());\r\n        this.drawnLetters = letters.filter(letter => letter.isDone());\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the current line\r\n     * @param x X-coordinate, relative to the parent block\r\n     * @param y Y-coordinate, relative to the parent block\r\n     */\r\n    setPosition(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Used to check if all the letters in this line have been drawn.\r\n     */\r\n    isDone() {\r\n        return this.letters.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns all the letters in this line including those that are to be animated.\r\n     */\r\n    getAllLetters() {\r\n        return [...this.letters, ...this.drawnLetters];\r\n    }\r\n\r\n    /**\r\n     * Remove the first letter from the queue. Used when a letter has been drawn completely.\r\n     * The removed letter is moved to the drawnLetters array\r\n     */\r\n    private dequeue() {\r\n        const removedItem = this.letters.shift();\r\n        if (removedItem) this.drawnLetters.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Render the current line\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number, prevRAFTime: number) {\r\n        this.ctx.save();\r\n\r\n        // Set the position of the line\r\n        this.ctx.translate(this.x, this.y);\r\n\r\n        if (this.letters.length > 0) {\r\n            const currentLetter = this.letters[0];\r\n            currentLetter.render(rafTime, prevRAFTime);\r\n\r\n            // If the current letter is animated, then remove it from the queue and add it to the drawn letters\r\n            if (currentLetter.isDone()) {\r\n                this.dequeue();\r\n            }\r\n        }\r\n\r\n        // Paint all the already animated letters\r\n        // The paint method will draw the line without changing the dashOffset\r\n\r\n        this.drawnLetters.forEach(letter => {\r\n            letter.paint();\r\n        });\r\n\r\n        // Restore canvas state (position)\r\n        this.ctx.restore();\r\n    }\r\n}\r\n","import Vara from '..';\r\nimport { BlockName, VaraText, VaraTextOptions } from '../types';\r\nimport VaraChar from './char';\r\nimport Letter from './letter';\r\nimport Line, { LineProps } from './line';\r\nimport RenderBase from './renderbase';\r\n\r\ninterface BlockProps {\r\n    ctx: CanvasRenderingContext2D;\r\n    options: Required<VaraText>;\r\n    root: Vara;\r\n}\r\n\r\nexport default class Block extends RenderBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    scale: number;\r\n\r\n    ctx: CanvasRenderingContext2D;\r\n    previousRAFTime: number;\r\n    lines: Line[];\r\n    drawnLines: Line[];\r\n    totalPathLength: number;\r\n    options: Required<VaraText>;\r\n    text: VaraChar[][];\r\n\r\n    private root: Vara;\r\n    private userDefinedRenderFn: (\r\n        ctx: CanvasRenderingContext2D,\r\n        rafTime: number\r\n    ) => void;\r\n\r\n    name: BlockName;\r\n\r\n    constructor(props: BlockProps) {\r\n        super(props);\r\n\r\n        this.x = props.options.x;\r\n        this.y = props.options.y;\r\n        this.width = props.options.width;\r\n        this.height = 0;\r\n\r\n        this.lines = [];\r\n        this.drawnLines = [];\r\n        this.ctx = props.ctx;\r\n        this.previousRAFTime = 0;\r\n        this.totalPathLength = 0;\r\n        this.text = [];\r\n        this.options = props.options;\r\n\r\n        this.name = 'block';\r\n\r\n        this.root = props.root;\r\n        this.scale = Math.min(1, props.options.fontSize / this.root.scalebase);\r\n\r\n        this.userDefinedRenderFn = () => null;\r\n\r\n        this.initTextToVaraChar();\r\n\r\n        this.generatePositions();\r\n    }\r\n\r\n    // Begin private functions\r\n\r\n    private initTextToVaraChar() {\r\n        if (typeof this.options.text === 'string') {\r\n            this.text = [\r\n                this.options.text.split('').map(\r\n                    letter =>\r\n                        new VaraChar({\r\n                            char: letter,\r\n                            fontItem:\r\n                                this.root.fontCharacters[\r\n                                    letter.charCodeAt(0)\r\n                                ] || this.root.fontCharacters['63'],\r\n                            isSpace: letter === ' ',\r\n                        })\r\n                ),\r\n            ];\r\n        } else if (Array.isArray(this.options.text)) {\r\n            this.text = this.options.text.map(line =>\r\n                line.split('').map(\r\n                    letter =>\r\n                        new VaraChar({\r\n                            char: letter,\r\n                            fontItem:\r\n                                this.root.fontCharacters[\r\n                                    letter.charCodeAt(0)\r\n                                ] || this.root.fontCharacters['63'],\r\n                            isSpace: letter === ' ',\r\n                        })\r\n                )\r\n            );\r\n        } else {\r\n            // TODO: Show warning / error\r\n            this.text = [];\r\n        }\r\n    }\r\n\r\n    private regeneratePositions(\r\n        lines: {\r\n            text: VaraChar[];\r\n            width: number;\r\n        }[]\r\n    ) {\r\n        this.height = 0;\r\n\r\n        let top = this.options.lineHeight;\r\n\r\n        const lettersToSetInLine: Letter[][] = [];\r\n\r\n        lines.forEach((line, lineIndex) => {\r\n            let left = 0;\r\n            let x = 0,\r\n                y = top;\r\n            if (this.options.textAlign === 'center') {\r\n                x = (this.options.width - line.width) / 2;\r\n            }\r\n\r\n            let lineClass = this.getLineAtIndex(lineIndex);\r\n            lineClass.setPosition(x, y);\r\n\r\n            const lettersToSet: Letter[] = [];\r\n\r\n            line.text.forEach(char => {\r\n                if (char.isSpace) {\r\n                    left += char.getFontItem().w;\r\n                } else {\r\n                    let foundLetter = this.getLetterByCharacterId(char.id);\r\n                    if (foundLetter) {\r\n                        foundLetter.setParent(lineClass);\r\n                        foundLetter.setPosition(left, 0);\r\n                        lettersToSet.push(foundLetter);\r\n\r\n                        left += foundLetter.character.getFontItem().w;\r\n                    } else {\r\n                        // TODO: Show meaningful error\r\n                        console.error(\r\n                            `Error - Letter with id ${char.id} not found`\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            top += this.options.lineHeight;\r\n            this.height += this.options.lineHeight;\r\n\r\n            lettersToSetInLine.push(lettersToSet);\r\n        });\r\n\r\n        this.getLines().forEach((line, lineIndex) => {\r\n            line.setLetters(lettersToSetInLine[lineIndex]);\r\n        });\r\n    }\r\n\r\n    private generatePositions() {\r\n        this.height = 0;\r\n\r\n        const lines = this.generateLineData(this.text);\r\n\r\n        let top = this.options.lineHeight;\r\n        lines.forEach(line => {\r\n            let left = 0;\r\n            let x = 0,\r\n                y = top;\r\n            if (this.options.textAlign === 'center') {\r\n                x = (this.options.width - line.width) / 2;\r\n            }\r\n\r\n            const lineClass = this.addLine({\r\n                x,\r\n                y,\r\n            });\r\n\r\n            line.text.forEach(letter => {\r\n                const currentLetter = letter.getFontItem();\r\n\r\n                lineClass.addLetter({\r\n                    x: left,\r\n                    y: 0,\r\n                    width: currentLetter.w,\r\n                    character: letter,\r\n                });\r\n\r\n                left += currentLetter.w;\r\n            });\r\n            top += this.options.lineHeight;\r\n            this.height += this.options.lineHeight;\r\n        });\r\n    }\r\n\r\n    private generateLineData(lines: VaraChar[][]) {\r\n        const returnData: {\r\n            text: VaraChar[];\r\n            width: number;\r\n        }[] = [\r\n            {\r\n                text: [],\r\n                width: 0,\r\n            },\r\n        ];\r\n\r\n        const wordSplittedLines: VaraChar[][][] = [];\r\n\r\n        lines.forEach(line => {\r\n            let l: VaraChar[][] = [[]];\r\n            line.forEach(letter => {\r\n                if (letter.isSpace) {\r\n                    l.push([]);\r\n                } else {\r\n                    l[l.length - 1].push(letter);\r\n                }\r\n            });\r\n            wordSplittedLines.push(l);\r\n        });\r\n\r\n        wordSplittedLines.forEach(line => {\r\n            let spaceWidth = 0;\r\n            line.forEach(word => {\r\n                let wordWidth = 0;\r\n\r\n                word.forEach(letter => {\r\n                    const currentLetter = letter.getFontItem();\r\n\r\n                    let pathPositionCorrection = currentLetter.paths.reduce(\r\n                        (a, c) => a + c.mx - c.dx,\r\n                        0\r\n                    );\r\n                    wordWidth +=\r\n                        (currentLetter.w + pathPositionCorrection) * this.scale;\r\n                });\r\n\r\n                const spaceChar = new VaraChar({\r\n                    char: ' ',\r\n                    fontItem: this.root.fontCharacters['32'],\r\n                    isSpace: true,\r\n                });\r\n\r\n                if (\r\n                    (returnData[returnData.length - 1]?.width ?? 0) +\r\n                        wordWidth +\r\n                        spaceWidth +\r\n                        this.options.x >\r\n                    this.options.width\r\n                ) {\r\n                    returnData.push({\r\n                        text: [...word, spaceChar],\r\n                        width: wordWidth,\r\n                    });\r\n                    spaceWidth = 0;\r\n                } else {\r\n                    returnData[returnData.length - 1] = {\r\n                        text: [\r\n                            ...returnData[returnData.length - 1].text,\r\n                            ...word,\r\n                            spaceChar,\r\n                        ],\r\n                        width:\r\n                            returnData[returnData.length - 1].width + wordWidth,\r\n                    };\r\n                    spaceWidth += spaceChar.getFontItem().w;\r\n                }\r\n            });\r\n        });\r\n\r\n        return returnData;\r\n    }\r\n\r\n    // End private functions\r\n\r\n    /**\r\n     * Creates and adds a new line of text\r\n     * @param line The properties of the line to be added\r\n     */\r\n    addLine(line: Omit<LineProps, 'ctx' | 'parent'>) {\r\n        const newLine = new Line({\r\n            ...line,\r\n            ctx: this.ctx,\r\n            parent: this,\r\n        });\r\n\r\n        this.lines.push(newLine);\r\n\r\n        return newLine;\r\n    }\r\n\r\n    removeLine(index?: number) {\r\n        const allLines = this.getLines();\r\n        if (index) {\r\n            const foundLine = allLines[index];\r\n\r\n            if (foundLine) {\r\n                this.lines = this.lines.filter(\r\n                    line => line.id !== foundLine.id\r\n                );\r\n                this.drawnLines = this.drawnLines.filter(\r\n                    line => line.id !== foundLine.id\r\n                );\r\n            } else {\r\n                // TODO: Show proper warning\r\n                //console.warn();\r\n            }\r\n        } else {\r\n            const toRemove = allLines[allLines.length - 1];\r\n\r\n            this.lines = this.lines.filter(line => line.id !== toRemove.id);\r\n            this.drawnLines = this.drawnLines.filter(\r\n                line => line.id !== toRemove.id\r\n            );\r\n        }\r\n    }\r\n\r\n    getCursorPosition(position: number) {\r\n        let textCharCount = 0;\r\n        let charId = -1;\r\n        this.text.forEach((textLine, index) => {\r\n            if (index < textCharCount + textLine.length) {\r\n                charId = this.text[index][position - textCharCount].id;\r\n            } else {\r\n                textCharCount += textLine.length;\r\n            }\r\n        });\r\n\r\n        if (charId > -1) {\r\n            const letter = this.getLetterByCharacterId(charId);\r\n\r\n            if (letter) {\r\n                const line = letter.getParent('line', letter) as Line;\r\n\r\n                const xPosition =\r\n                    line.x + (letter.x + letter.width) * this.scale;\r\n                const yPosition = line.y;\r\n\r\n                return {\r\n                    x: xPosition,\r\n                    y: yPosition,\r\n                };\r\n            } else {\r\n                console.warn('Letter not found');\r\n                return false;\r\n            }\r\n        } else {\r\n            console.warn('Character Not found');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    addLetter({\r\n        letter,\r\n        position,\r\n    }: {\r\n        letter: string;\r\n        position: number | number[];\r\n    }) {\r\n        // let textBlock: string[] = [];\r\n        // if (Array.isArray(position) && Array.isArray(this.textItem.text)) {\r\n        //     textBlock[position[0]] = `${this.textItem.text[position[0]].slice(\r\n        //         0,\r\n        //         position[1]\r\n        //     )}${letter}${this.textItem.text[position[0]].slice(position[1])}`;\r\n        // } else {\r\n        //     if (typeof position === 'number') {\r\n        //         textBlock = [\r\n        //             `${this.textItem.text+\" \".slice(\r\n        //                 0,\r\n        //                 position\r\n        //             )}${letter}${this.textItem.text+\" \".slice(position)}`,\r\n        //         ];\r\n        //     }\r\n        // }\r\n\r\n        const newChar = new VaraChar({\r\n            char: letter,\r\n            fontItem:\r\n                this.root.fontCharacters[letter.charCodeAt(0)] ||\r\n                this.root.fontCharacters['63'],\r\n            isSpace: letter === ' ',\r\n        });\r\n\r\n        if (typeof position === 'number') {\r\n            let textCharCount = 0;\r\n            this.text.forEach((textLine, index) => {\r\n                if (position <= textCharCount + textLine.length) {\r\n                    this.text[index] = [\r\n                        ...textLine.slice(0, position - textCharCount),\r\n                        newChar,\r\n                        ...textLine.slice(position - textCharCount),\r\n                    ];\r\n                } else {\r\n                    textCharCount += textLine.length;\r\n                }\r\n            });\r\n        }\r\n\r\n        const lines = this.generateLineData(this.text);\r\n\r\n        if (lines.length > this.getLineCount()) {\r\n            while (lines.length > this.getLineCount()) {\r\n                this.addLine({\r\n                    x: 0,\r\n                    y: 0,\r\n                });\r\n            }\r\n        }\r\n\r\n        this.getLastLine().addLetter({\r\n            character: newChar,\r\n            width: newChar.fontItem.w,\r\n            x: 0,\r\n            y: 0,\r\n        });\r\n\r\n        this.regeneratePositions(lines);\r\n    }\r\n\r\n    removeLetter({ position }: { position: number | number[] }) {\r\n        let charId = -1;\r\n\r\n        if (typeof position === 'number') {\r\n            let textCharCount = 0;\r\n            this.text.forEach((textLine, index) => {\r\n                if (position <= textCharCount + textLine.length) {\r\n                    if (position <= textCharCount + textLine.length) {\r\n                        charId = this.text[index][position - textCharCount].id;\r\n                        this.text[index].splice(position - textCharCount, 1);\r\n                    } else {\r\n                        textCharCount += textLine.length;\r\n                    }\r\n                } else {\r\n                    textCharCount += textLine.length;\r\n                }\r\n            });\r\n        }\r\n\r\n        const lines = this.generateLineData(this.text);\r\n\r\n        if (lines.length < this.getLineCount()) {\r\n            while (lines.length < this.getLineCount()) {\r\n                this.removeLine();\r\n            }\r\n        }\r\n\r\n        const letter = this.getAllLetters().find(\r\n            item => item.character.getId() === charId\r\n        );\r\n\r\n        if (letter) {\r\n            const line = letter.getParent('line', letter);\r\n\r\n            if (line) {\r\n                line.removeLetter(letter.id);\r\n            }\r\n        }\r\n\r\n        this.regeneratePositions(lines);\r\n    }\r\n\r\n    getAllLetters() {\r\n        const letters = this.getLines().map(item => item.getAllLetters());\r\n        return letters.flat();\r\n    }\r\n\r\n    getLines() {\r\n        return [...this.lines, ...this.drawnLines];\r\n    }\r\n\r\n    getLineCount() {\r\n        return this.getLines().length;\r\n    }\r\n\r\n    getLineAtIndex(index: number) {\r\n        return this.getLines()[index];\r\n    }\r\n\r\n    getLastLine() {\r\n        const allLines = this.getLines();\r\n        return allLines[allLines.length - 1];\r\n    }\r\n\r\n    getLetterByCharacterId(id: number) {\r\n        return (\r\n            this.getAllLetters().find(item => item.character.id === id) ?? false\r\n        );\r\n    }\r\n\r\n    setRenderFunction(\r\n        fn: (ctx: CanvasRenderingContext2D, rafTime: number) => void\r\n    ) {\r\n        this.userDefinedRenderFn = fn;\r\n    }\r\n\r\n    updateOptions(options: VaraTextOptions) {\r\n        this.options = {\r\n            ...this.options,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Remove the first line from the queue of lines. Used when a text line has been drawn completely.\r\n     *\r\n     * The removed item is moved to the drawnParts array\r\n     */\r\n    dequeue() {\r\n        const removedItem = this.lines.shift();\r\n        if (removedItem) this.drawnLines.push(removedItem);\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the total path length\r\n     * @param pathLength Path length that is to be incremented or decrement\r\n     * @param action Whether to increment or decrement\r\n     */\r\n    modifyPathLength(\r\n        pathLength: number,\r\n        action: 'increment' | 'decrement' = 'increment'\r\n    ) {\r\n        if (action === 'increment') {\r\n            this.totalPathLength += pathLength;\r\n        } else {\r\n            this.totalPathLength -= pathLength;\r\n        }\r\n        return this.totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Render the block\r\n     * @param rafTime The time value received from requestAnimationFrame\r\n     */\r\n    render(rafTime: number) {\r\n        if (this.previousRAFTime === 0) {\r\n            this.previousRAFTime = rafTime;\r\n        }\r\n\r\n        this.ctx.save();\r\n        this.ctx.translate(this.x, this.y);\r\n        this.ctx.strokeStyle = this.options.color;\r\n        this.ctx.lineWidth = this.options.strokeWidth;\r\n        this.ctx.lineCap = 'round';\r\n        this.ctx.lineJoin = 'round';\r\n\r\n        this.drawnLines.forEach(line => {\r\n            line.render(rafTime, this.previousRAFTime);\r\n        });\r\n\r\n        if (this.lines.length > 0) {\r\n            const line = this.lines[0];\r\n            if (line.isDone()) {\r\n                this.dequeue();\r\n            }\r\n            line.render(rafTime, this.previousRAFTime);\r\n        }\r\n        this.userDefinedRenderFn(this.ctx, rafTime);\r\n\r\n        this.ctx.restore();\r\n        this.previousRAFTime = rafTime;\r\n    }\r\n}\r\n","import {\r\n    VaraGeneralOptions,\r\n    VaraText,\r\n    VaraFontItem,\r\n    ObjectKeys,\r\n    VaraTextOptions,\r\n} from './types';\r\nimport Block from './utils/block';\r\n\r\nexport default class Vara {\r\n    elementName: string;\r\n    element: HTMLElement;\r\n    fontSource: string;\r\n    options: VaraGeneralOptions;\r\n    textItems: VaraText[];\r\n    blocks: Block[];\r\n    rendered: boolean;\r\n    defaultOptions: Required<VaraGeneralOptions>;\r\n    defaultCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    canvasWidth: number;\r\n    contextHeight: number;\r\n    fontCharacters: {\r\n        [x: string]: VaraFontItem;\r\n    };\r\n    fontProperties!: {\r\n        s: number;\r\n        // TODO: add other properties\r\n        slc: 'round';\r\n        bsw: number;\r\n        lh: number;\r\n        space: number;\r\n        tf: number;\r\n    };\r\n    onDrawF?: () => void;\r\n    private readyfn?: () => void;\r\n\r\n    whitespace: number;\r\n    scalebase: number;\r\n\r\n    constructor(\r\n        elem: string,\r\n        fontSource: string,\r\n        text: VaraText[],\r\n        options: VaraGeneralOptions\r\n    ) {\r\n        this.elementName = elem;\r\n        this.element = document.querySelector(elem) as HTMLElement;\r\n        this.fontSource = fontSource;\r\n        this.options = options;\r\n        this.textItems = text;\r\n        this.blocks = [];\r\n        this.rendered = false;\r\n        this.fontCharacters = {};\r\n        this.canvasWidth = 0;\r\n\r\n        this.defaultOptions = {\r\n            fontSize: 21,\r\n            strokeWidth: 0.5,\r\n            color: '#000',\r\n            duration: 1000,\r\n            textAlign: 'left',\r\n            autoAnimation: true,\r\n            queued: true,\r\n            delay: 0,\r\n            breakWord: false,\r\n            letterSpacing: {\r\n                global: 0,\r\n            },\r\n            width: this.element.getBoundingClientRect().width,\r\n            lineHeight: 30,\r\n        };\r\n\r\n        this.defaultCharacters = {\r\n            '63': {\r\n                paths: [\r\n                    {\r\n                        w: 8.6437,\r\n                        h: 14.23173,\r\n                        my: 22.6665,\r\n                        mx: 0,\r\n                        dx: 0,\r\n                        d:\r\n                            'm 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85',\r\n                        pl: 1,\r\n                    },\r\n                    {\r\n                        w: 1.1037,\r\n                        h: 1.5498,\r\n                        my: 8.8815,\r\n                        dx: 0,\r\n                        mx: 1,\r\n                        d:\r\n                            'm 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z',\r\n                        pl: 1,\r\n                    },\r\n                ],\r\n                w: 8.6437,\r\n            },\r\n        };\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = this.element.getBoundingClientRect().width;\r\n        this.canvas.height = 800;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        this.element.appendChild(this.canvas);\r\n        this.whitespace = 10;\r\n        this.scalebase = 16;\r\n\r\n        this.contextHeight = 0;\r\n\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.normalizeOptions();\r\n\r\n        const xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open('GET', this.fontSource, true);\r\n        xmlhttp.onreadystatechange = () => {\r\n            if (xmlhttp.readyState === 4) {\r\n                if (xmlhttp.status === 200) {\r\n                    const contents = JSON.parse(xmlhttp.responseText);\r\n                    this.fontCharacters = contents.c;\r\n                    this.fontProperties = contents.p;\r\n                    this.preRender();\r\n                    if (this.readyfn) this.readyfn();\r\n                    this.render();\r\n                }\r\n            }\r\n        };\r\n        xmlhttp.send(null);\r\n    }\r\n\r\n    ready(fn: () => void) {\r\n        this.readyfn = fn;\r\n    }\r\n\r\n    onDraw(fn: () => void) {\r\n        this.onDrawF = fn;\r\n    }\r\n\r\n    /**\r\n     * Sets default option value for all existing option properties.\r\n     * If an option value is not provided, then it will first check if it is given in the global options, if not it will use the default option.\r\n     */\r\n    private normalizeOptions() {\r\n        this.options = this.options || {};\r\n\r\n        this.options = {\r\n            ...this.defaultOptions,\r\n            ...this.options,\r\n        };\r\n\r\n        Object.keys(this.defaultCharacters).forEach(character => {\r\n            if (this.fontCharacters[character] === undefined) {\r\n                this.fontCharacters[character] = this.defaultCharacters[\r\n                    character\r\n                ];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs some actions before rendering starts. These include finding the pathLength of each path and generating the render data.\r\n     */\r\n    private preRender() {\r\n        // TODO: Cleanup all appended elements\r\n        let svg = this.createSVGNode('svg', {\r\n            width: '100',\r\n            height: '100',\r\n        });\r\n        svg.style.position = 'absolute';\r\n        svg.style.zIndex = '-100';\r\n        svg.style.opacity = '0';\r\n        svg.style.top = '0';\r\n\r\n        document.body.appendChild(svg);\r\n        let svgPathData = this.createSVGNode('path', {\r\n            d: '',\r\n        }) as SVGPathElement;\r\n        svg.appendChild(svgPathData);\r\n\r\n        this.setScaleBase();\r\n        this.setWhitespaceWidth();\r\n\r\n        if (this.fontCharacters['32'] === undefined) {\r\n            this.createWhitespaceLine();\r\n        }\r\n\r\n        this.objectKeys(this.fontCharacters).forEach(char => {\r\n            this.fontCharacters[char].paths.forEach((path, i) => {\r\n                svgPathData.setAttributeNS(null, 'd', path.d);\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].dx = svgPathData.getBoundingClientRect().x;\r\n                this.fontCharacters[char].paths[\r\n                    i\r\n                ].pl = svgPathData.getTotalLength();\r\n            });\r\n        });\r\n\r\n        this.textItems.forEach(item => {\r\n            const block = new Block({\r\n                root: this,\r\n                options: {\r\n                    ...(this.options as Required<VaraTextOptions>),\r\n                    ...item,\r\n                },\r\n                ctx: this.ctx,\r\n            });\r\n\r\n            this.blocks.push(block);\r\n        });\r\n    }\r\n\r\n    private createWhitespaceLine() {\r\n        const path = `m0,0 l0,0 ${this.whitespace},0`;\r\n        const fontItem: VaraFontItem = {\r\n            paths: [\r\n                {\r\n                    d: path,\r\n                    dx: 0,\r\n                    h: 1,\r\n                    mx: 0,\r\n                    my: 0,\r\n                    pl: this.whitespace,\r\n                    w: this.whitespace,\r\n                },\r\n            ],\r\n            w: this.whitespace,\r\n        };\r\n        this.fontCharacters['32'] = fontItem;\r\n    }\r\n\r\n    private render(rafTime = 0) {\r\n        let canvasHeight = this.calculateCanvasHeight();\r\n        if (canvasHeight !== this.canvas.height) {\r\n            this.canvas.height = canvasHeight;\r\n        }\r\n        this.ctx.clearRect(0, 0, this.canvas.width, canvasHeight);\r\n\r\n        this.blocks.forEach(item => {\r\n            item.render(rafTime);\r\n        });\r\n\r\n        window.requestAnimationFrame(time => this.render(time));\r\n    }\r\n\r\n    // TODO: Make proper calculation function.\r\n    calculateCanvasHeight() {\r\n        let height = 0;\r\n        this.blocks.forEach(item => {\r\n            if (item.height && item.options.y) {\r\n                height += item.height + item.options.y;\r\n            }\r\n        });\r\n        return height + 50;\r\n    }\r\n\r\n    addLetter({\r\n        letter,\r\n        id,\r\n        position,\r\n    }: {\r\n        letter: string;\r\n        id: string;\r\n        position: number;\r\n    }) {\r\n        const block = this.getBlock(id);\r\n        if (block) {\r\n            block.addLetter({ letter, position });\r\n            return true;\r\n        } else {\r\n            console.warn(`Block with id ${id} not found`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    removeLetter({ id, position }: { id: string; position: number }) {\r\n        const block = this.getBlock(id);\r\n\r\n        if (block) {\r\n            block.removeLetter({ position });\r\n            return true;\r\n        } else {\r\n            console.warn(`Block with id ${id} not found`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getCursorPosition({ position, id }: { position: number; id: string }) {\r\n        const block = this.getBlock(id);\r\n\r\n        if (block) {\r\n            return block.getCursorPosition(position);\r\n        } else {\r\n            console.warn(`Block with id ${id} not found`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    setRenderFunction(id: string, fn: (ctx: CanvasRenderingContext2D) => void) {\r\n        const block = this.getBlock(id);\r\n        if (block) {\r\n            return block.setRenderFunction(fn);\r\n        } else {\r\n            console.warn(`Block with id ${id} not found`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getBlock(id: string) {\r\n        return this.blocks.find(item => item.options.id === id) ?? false;\r\n    }\r\n\r\n    /**\r\n     * Creates and returns an SVG element\r\n     * @param n The name of the SVG node to be created\r\n     * @param v The attributes of the node\r\n     */\r\n\r\n    createSVGNode(n: string, v: { [x: string]: string }) {\r\n        const e = document.createElementNS('http://www.w3.org/2000/svg', n);\r\n        for (var p in v)\r\n            e.setAttributeNS(\r\n                null,\r\n                p.replace(/[A-Z]/g, function(m) {\r\n                    return '-' + m.toLowerCase();\r\n                }),\r\n                v[p]\r\n            );\r\n        return e;\r\n    }\r\n\r\n    private setScaleBase() {\r\n        const charCode = this.fontCharacters['97']\r\n            ? '97'\r\n            : Object.keys(this.fontCharacters)[0];\r\n        const psuedoText = this.fontCharacters[charCode];\r\n\r\n        const psuedoTextElement = document.createElement('span');\r\n        psuedoTextElement.setAttribute('style', 'position:absolute;opacity:0;');\r\n        psuedoTextElement.textContent = String.fromCharCode(parseInt(charCode));\r\n\r\n        this.element.appendChild(psuedoTextElement);\r\n\r\n        const psuedoTextElementWidth = psuedoTextElement.clientWidth;\r\n        this.scalebase = psuedoTextElementWidth / psuedoText.w;\r\n        console.log(psuedoTextElementWidth, psuedoText.w);\r\n\r\n        this.element.removeChild(psuedoTextElement);\r\n    }\r\n\r\n    private setWhitespaceWidth() {\r\n        const psuedoTextElement = document.createElement('span');\r\n        psuedoTextElement.setAttribute('style', 'position:absolute;opacity:0;');\r\n        psuedoTextElement.innerHTML = '&nbsp;';\r\n\r\n        this.element.appendChild(psuedoTextElement);\r\n        const psuedoTextElementWidth = psuedoTextElement.clientWidth;\r\n        this.whitespace = psuedoTextElementWidth / this.scalebase;\r\n        this.element.removeChild(psuedoTextElement);\r\n    }\r\n\r\n    /**\r\n     * Modifies the move to command of a given path and returns it.\r\n     * @param path The path \"d\" property\r\n     * @param x The x co-ordinate\r\n     * @param y The y co-ordinate\r\n     */\r\n    processPath(path: string, x = 0, y = 0) {\r\n        let svgPath = path.split('');\r\n        svgPath[2] = x + 1 + '';\r\n        svgPath[4] = y + '';\r\n        return svgPath.join('');\r\n    }\r\n\r\n    objectKeys<T>(x: T) {\r\n        let keys = Object.keys(x) as ObjectKeys<T>;\r\n        return keys;\r\n    }\r\n\r\n    boundRect(x: number, y: number, w: number, h = 10) {\r\n        this.ctx.save();\r\n        this.ctx.fillStyle = 'rgba(209, 56, 61,0.4)';\r\n        this.ctx.fillRect(x, y, w, h);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\r\nif (window) {\r\n    (window as any).Vara = Vara;\r\n}\r\n"],"names":["varaCharId","VaraChar","props","fontItem","isSpace","id","getFontItem","getId","BLOCK_COMPOSITION","RenderBase","ctx","parent","name","getParent","parentName","current","parentIndex","indexOf","currentItemIndex","LetterPart","x","y","path","pathLength","dashOffset","width","rootBlock","paint","save","stroke","Path2D","processPath","restore","draw","delta","pathDuration","totalPathLength","options","duration","speed","lineDashOffset","setLineDash","svgPath","split","join","letterId","Letter","parts","drawnParts","character","setPosition","addPart","part","push","modifyPathLength","setParent","isDone","length","dequeue","removedItem","shift","render","rafTime","previousRAFTime","scale","translate","forEach","drawnPart","lineId","Line","letters","drawnLetters","addLetter","letter","newLetter","paths","d","mx","dx","my","pl","w","removeLetter","filter","setLetters","getAllLetters","prevRAFTime","currentLetter","Block","height","lines","drawnLines","text","root","Math","min","fontSize","scalebase","userDefinedRenderFn","initTextToVaraChar","generatePositions","map","fontCharacters","charCodeAt","Array","isArray","line","regeneratePositions","top","lineHeight","lettersToSetInLine","lineIndex","left","textAlign","lineClass","getLineAtIndex","lettersToSet","char","foundLetter","getLetterByCharacterId","console","error","getLines","generateLineData","addLine","returnData","wordSplittedLines","l","spaceWidth","word","wordWidth","pathPositionCorrection","reduce","a","c","spaceChar","newLine","removeLine","index","allLines","foundLine","toRemove","getCursorPosition","position","textCharCount","charId","textLine","xPosition","yPosition","warn","newChar","slice","getLineCount","getLastLine","splice","find","item","flat","setRenderFunction","fn","updateOptions","action","strokeStyle","color","lineWidth","strokeWidth","lineCap","lineJoin","Vara","elem","fontSource","elementName","element","document","querySelector","textItems","blocks","rendered","canvasWidth","defaultOptions","autoAnimation","queued","delay","breakWord","letterSpacing","global","getBoundingClientRect","defaultCharacters","h","canvas","createElement","getContext","appendChild","whitespace","contextHeight","init","normalizeOptions","xmlhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","contents","JSON","parse","responseText","fontProperties","p","preRender","readyfn","send","ready","onDraw","onDrawF","Object","keys","undefined","svg","createSVGNode","style","zIndex","opacity","body","svgPathData","setScaleBase","setWhitespaceWidth","createWhitespaceLine","objectKeys","i","setAttributeNS","getTotalLength","block","canvasHeight","calculateCanvasHeight","clearRect","window","requestAnimationFrame","time","getBlock","n","v","e","createElementNS","replace","m","toLowerCase","charCode","psuedoText","psuedoTextElement","setAttribute","textContent","String","fromCharCode","parseInt","psuedoTextElementWidth","clientWidth","log","removeChild","innerHTML","boundRect","fillStyle","fillRect","fill"],"mappings":"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"}